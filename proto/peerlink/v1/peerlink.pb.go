// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: proto/peerlink/v1/peerlink.proto

package peerlinkv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Wrapper message for all frame types.
type PeerMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Kind:
	//
	//	*PeerMessage_Handshake
	//	*PeerMessage_Event
	//	*PeerMessage_Ack
	//	*PeerMessage_Heartbeat
	Kind          isPeerMessage_Kind `protobuf_oneof:"kind"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerMessage) Reset() {
	*x = PeerMessage{}
	mi := &file_proto_peerlink_v1_peerlink_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerMessage) ProtoMessage() {}

func (x *PeerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_peerlink_v1_peerlink_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerMessage.ProtoReflect.Descriptor instead.
func (*PeerMessage) Descriptor() ([]byte, []int) {
	return file_proto_peerlink_v1_peerlink_proto_rawDescGZIP(), []int{0}
}

func (x *PeerMessage) GetKind() isPeerMessage_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *PeerMessage) GetHandshake() *Handshake {
	if x != nil {
		if x, ok := x.Kind.(*PeerMessage_Handshake); ok {
			return x.Handshake
		}
	}
	return nil
}

func (x *PeerMessage) GetEvent() *Event {
	if x != nil {
		if x, ok := x.Kind.(*PeerMessage_Event); ok {
			return x.Event
		}
	}
	return nil
}

func (x *PeerMessage) GetAck() *Ack {
	if x != nil {
		if x, ok := x.Kind.(*PeerMessage_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

func (x *PeerMessage) GetHeartbeat() *Heartbeat {
	if x != nil {
		if x, ok := x.Kind.(*PeerMessage_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

type isPeerMessage_Kind interface {
	isPeerMessage_Kind()
}

type PeerMessage_Handshake struct {
	Handshake *Handshake `protobuf:"bytes,1,opt,name=handshake,proto3,oneof"`
}

type PeerMessage_Event struct {
	Event *Event `protobuf:"bytes,2,opt,name=event,proto3,oneof"`
}

type PeerMessage_Ack struct {
	Ack *Ack `protobuf:"bytes,3,opt,name=ack,proto3,oneof"`
}

type PeerMessage_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,4,opt,name=heartbeat,proto3,oneof"`
}

func (*PeerMessage_Handshake) isPeerMessage_Kind() {}

func (*PeerMessage_Event) isPeerMessage_Kind() {}

func (*PeerMessage_Ack) isPeerMessage_Kind() {}

func (*PeerMessage_Heartbeat) isPeerMessage_Kind() {}

// Sent once at stream startup.
type Handshake struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NodeId          string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                             // Unique peer identifier
	ProtocolVersion uint32                 `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"` // Major.minor encoded as XYY (e.g. 100 = v1.0)
	Features        []string               `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`                                       // Optional supported features (for negotiation)
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Handshake) Reset() {
	*x = Handshake{}
	mi := &file_proto_peerlink_v1_peerlink_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Handshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handshake) ProtoMessage() {}

func (x *Handshake) ProtoReflect() protoreflect.Message {
	mi := &file_proto_peerlink_v1_peerlink_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handshake.ProtoReflect.Descriptor instead.
func (*Handshake) Descriptor() ([]byte, []int) {
	return file_proto_peerlink_v1_peerlink_proto_rawDescGZIP(), []int{1}
}

func (x *Handshake) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Handshake) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *Handshake) GetFeatures() []string {
	if x != nil {
		return x.Features
	}
	return nil
}

// Application-level event payload.
// Events are organized by topic with independent offset sequences per topic.
type Event struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`                                                                            // Topic-specific log offset
	Payload       []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`                                                                           // Raw event bytes
	Headers       map[string]string      `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Key-value metadata
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_proto_peerlink_v1_peerlink_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_peerlink_v1_peerlink_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_proto_peerlink_v1_peerlink_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Event) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Event) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Event) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

// ACK from receiver to sender.
// Used for at-least-once replay semantics per topic.
type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"` // Highest contiguous offset received/applied for topic
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_proto_peerlink_v1_peerlink_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_peerlink_v1_peerlink_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_proto_peerlink_v1_peerlink_proto_rawDescGZIP(), []int{3}
}

func (x *Ack) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Ack) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Lightweight heartbeat/ping.
// Can also carry RTT measurement.
type Heartbeat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	mi := &file_proto_peerlink_v1_peerlink_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_peerlink_v1_peerlink_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_proto_peerlink_v1_peerlink_proto_rawDescGZIP(), []int{4}
}

func (x *Heartbeat) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_proto_peerlink_v1_peerlink_proto protoreflect.FileDescriptor

const file_proto_peerlink_v1_peerlink_proto_rawDesc = "" +
	"\n" +
	" proto/peerlink/v1/peerlink.proto\x12\vpeerlink.v1\"\xd7\x01\n" +
	"\vPeerMessage\x126\n" +
	"\thandshake\x18\x01 \x01(\v2\x16.peerlink.v1.HandshakeH\x00R\thandshake\x12*\n" +
	"\x05event\x18\x02 \x01(\v2\x12.peerlink.v1.EventH\x00R\x05event\x12$\n" +
	"\x03ack\x18\x03 \x01(\v2\x10.peerlink.v1.AckH\x00R\x03ack\x126\n" +
	"\theartbeat\x18\x04 \x01(\v2\x16.peerlink.v1.HeartbeatH\x00R\theartbeatB\x06\n" +
	"\x04kind\"k\n" +
	"\tHandshake\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12)\n" +
	"\x10protocol_version\x18\x02 \x01(\rR\x0fprotocolVersion\x12\x1a\n" +
	"\bfeatures\x18\x03 \x03(\tR\bfeatures\"\xc6\x01\n" +
	"\x05Event\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\x129\n" +
	"\aheaders\x18\x04 \x03(\v2\x1f.peerlink.v1.Event.HeadersEntryR\aheaders\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"3\n" +
	"\x03Ack\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\")\n" +
	"\tHeartbeat\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp2Q\n" +
	"\bPeerLink\x12E\n" +
	"\vEventStream\x12\x18.peerlink.v1.PeerMessage\x1a\x18.peerlink.v1.PeerMessage(\x010\x01BFZDgithub.com/rmacdonaldsmith/eventmesh-go/proto/peerlink/v1;peerlinkv1b\x06proto3"

var (
	file_proto_peerlink_v1_peerlink_proto_rawDescOnce sync.Once
	file_proto_peerlink_v1_peerlink_proto_rawDescData []byte
)

func file_proto_peerlink_v1_peerlink_proto_rawDescGZIP() []byte {
	file_proto_peerlink_v1_peerlink_proto_rawDescOnce.Do(func() {
		file_proto_peerlink_v1_peerlink_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_peerlink_v1_peerlink_proto_rawDesc), len(file_proto_peerlink_v1_peerlink_proto_rawDesc)))
	})
	return file_proto_peerlink_v1_peerlink_proto_rawDescData
}

var file_proto_peerlink_v1_peerlink_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_peerlink_v1_peerlink_proto_goTypes = []any{
	(*PeerMessage)(nil), // 0: peerlink.v1.PeerMessage
	(*Handshake)(nil),   // 1: peerlink.v1.Handshake
	(*Event)(nil),       // 2: peerlink.v1.Event
	(*Ack)(nil),         // 3: peerlink.v1.Ack
	(*Heartbeat)(nil),   // 4: peerlink.v1.Heartbeat
	nil,                 // 5: peerlink.v1.Event.HeadersEntry
}
var file_proto_peerlink_v1_peerlink_proto_depIdxs = []int32{
	1, // 0: peerlink.v1.PeerMessage.handshake:type_name -> peerlink.v1.Handshake
	2, // 1: peerlink.v1.PeerMessage.event:type_name -> peerlink.v1.Event
	3, // 2: peerlink.v1.PeerMessage.ack:type_name -> peerlink.v1.Ack
	4, // 3: peerlink.v1.PeerMessage.heartbeat:type_name -> peerlink.v1.Heartbeat
	5, // 4: peerlink.v1.Event.headers:type_name -> peerlink.v1.Event.HeadersEntry
	0, // 5: peerlink.v1.PeerLink.EventStream:input_type -> peerlink.v1.PeerMessage
	0, // 6: peerlink.v1.PeerLink.EventStream:output_type -> peerlink.v1.PeerMessage
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_peerlink_v1_peerlink_proto_init() }
func file_proto_peerlink_v1_peerlink_proto_init() {
	if File_proto_peerlink_v1_peerlink_proto != nil {
		return
	}
	file_proto_peerlink_v1_peerlink_proto_msgTypes[0].OneofWrappers = []any{
		(*PeerMessage_Handshake)(nil),
		(*PeerMessage_Event)(nil),
		(*PeerMessage_Ack)(nil),
		(*PeerMessage_Heartbeat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_peerlink_v1_peerlink_proto_rawDesc), len(file_proto_peerlink_v1_peerlink_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_peerlink_v1_peerlink_proto_goTypes,
		DependencyIndexes: file_proto_peerlink_v1_peerlink_proto_depIdxs,
		MessageInfos:      file_proto_peerlink_v1_peerlink_proto_msgTypes,
	}.Build()
	File_proto_peerlink_v1_peerlink_proto = out.File
	file_proto_peerlink_v1_peerlink_proto_goTypes = nil
	file_proto_peerlink_v1_peerlink_proto_depIdxs = nil
}
