syntax = "proto3";

package peerlink.v1;

option go_package = "github.com/rmacdonaldsmith/eventmesh-go/proto/peerlink/v1;peerlinkv1";

// Top-level streaming service.
// Each peer establishes a single long-lived bidirectional stream.
service PeerLink {
  rpc EventStream(stream PeerMessage) returns (stream PeerMessage);
}

// Wrapper message for all frame types.
message PeerMessage {
  oneof kind {
    Handshake handshake = 1;
    Event event = 2;
    Ack ack = 3;
    Heartbeat heartbeat = 4;
  }
}

// Sent once at stream startup.
message Handshake {
  string node_id = 1;            // Unique peer identifier
  uint32 protocol_version = 2;   // Major.minor encoded as XYY (e.g. 100 = v1.0)
  repeated string features = 3;  // Optional supported features (for negotiation)
}

// Application-level event payload.
// Events are organized by topic with independent offset sequences per topic.
message Event {
  string topic = 1;
  int64 offset = 2;                     // Topic-specific log offset
  bytes payload = 3;                    // Raw event bytes
  map<string, string> headers = 4;      // Key-value metadata
}

// ACK from receiver to sender.
// Used for at-least-once replay semantics per topic.
message Ack {
  string topic = 1;
  int64 offset = 2;              // Highest contiguous offset received/applied for topic
}

// Lightweight heartbeat/ping.
// Can also carry RTT measurement.
message Heartbeat {
  int64 timestamp = 1;
}