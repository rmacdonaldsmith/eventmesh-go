{"id":"eventmesh-go-1","title":"Implement HTTP API for EventMesh","description":"Build RESTful HTTP API with JWT authentication, event publishing/subscribing, and Server-Sent Events streaming. Design documented in docs/EventMesh-HTTP-API-Implementation-Plan.md","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-13T22:50:21.710574-07:00","updated_at":"2025-10-14T11:29:42.389146-07:00","closed_at":"2025-10-14T11:29:42.389146-07:00","dependencies":[{"issue_id":"eventmesh-go-1","depends_on_id":"eventmesh-go-2","type":"blocks","created_at":"2025-10-13T22:51:13.362602-07:00","created_by":"rmacdonaldsmith"},{"issue_id":"eventmesh-go-1","depends_on_id":"eventmesh-go-3","type":"blocks","created_at":"2025-10-13T22:51:18.494076-07:00","created_by":"rmacdonaldsmith"},{"issue_id":"eventmesh-go-1","depends_on_id":"eventmesh-go-4","type":"blocks","created_at":"2025-10-13T22:51:23.678426-07:00","created_by":"rmacdonaldsmith"},{"issue_id":"eventmesh-go-1","depends_on_id":"eventmesh-go-5","type":"blocks","created_at":"2025-10-13T22:51:23.685883-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-10","title":"HTTP API Implementation Epic","description":"Complete RESTful HTTP API with JWT authentication, event publishing/subscribing, and Server-Sent Events streaming for EventMesh. Replaces eventmesh-go-1.","status":"closed","priority":0,"issue_type":"feature","created_at":"2025-10-14T11:28:19.600608-07:00","updated_at":"2025-10-15T10:07:20.315887-07:00","closed_at":"2025-10-15T10:07:20.315887-07:00"}
{"id":"eventmesh-go-11","title":"Create internal/httpapi package structure","description":"Set up basic package structure for HTTP API: server.go, handlers.go, auth.go, types.go, middleware.go as outlined in design doc","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-14T11:28:25.341445-07:00","updated_at":"2025-10-14T11:28:45.197798-07:00","closed_at":"2025-10-14T11:28:45.197798-07:00"}
{"id":"eventmesh-go-12","title":"[Task 100] Create internal/httpapi package structure","description":"Epic 10, Task 100: Set up basic package structure for HTTP API: server.go, handlers.go, auth.go, types.go, middleware.go","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-14T11:29:02.259153-07:00","updated_at":"2025-10-14T12:57:37.086656-07:00","closed_at":"2025-10-14T12:57:37.086656-07:00","dependencies":[{"issue_id":"eventmesh-go-12","depends_on_id":"eventmesh-go-10","type":"parent-child","created_at":"2025-10-14T11:29:34.1102-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-13","title":"[Task 101] Implement JWT authentication middleware","description":"Epic 10, Task 101: Create JWT-based authentication for client isolation. Simple clientId-based tokens for MVP","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-14T11:29:10.643681-07:00","updated_at":"2025-10-14T19:48:55.821726-07:00","closed_at":"2025-10-14T19:48:55.821726-07:00","dependencies":[{"issue_id":"eventmesh-go-13","depends_on_id":"eventmesh-go-10","type":"parent-child","created_at":"2025-10-14T11:29:34.117581-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-14","title":"[Task 102] Create event publishing endpoints","description":"Epic 10, Task 102: Implement POST /api/v1/events endpoint that integrates with existing MeshNode.PublishEvent method","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-14T11:29:10.650979-07:00","updated_at":"2025-10-14T13:10:15.340241-07:00","closed_at":"2025-10-14T13:10:15.340241-07:00","dependencies":[{"issue_id":"eventmesh-go-14","depends_on_id":"eventmesh-go-10","type":"parent-child","created_at":"2025-10-14T11:29:34.125147-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-15","title":"[Task 103] Implement Server-Sent Events streaming","description":"Epic 10, Task 103: Create GET /api/v1/events/stream endpoint for real-time event delivery using SSE and existing subscription system","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-14T11:29:10.658044-07:00","updated_at":"2025-10-14T19:48:45.627761-07:00","closed_at":"2025-10-14T19:48:45.627761-07:00","dependencies":[{"issue_id":"eventmesh-go-15","depends_on_id":"eventmesh-go-10","type":"parent-child","created_at":"2025-10-14T11:29:34.132509-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-16","title":"[Task 104] Create subscription management endpoints","description":"Epic 10, Task 104: Implement POST/GET/DELETE /api/v1/subscriptions endpoints for client subscription management with proper client isolation","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-14T11:29:18.273126-07:00","updated_at":"2025-10-14T19:48:50.14746-07:00","closed_at":"2025-10-14T19:48:50.14746-07:00","dependencies":[{"issue_id":"eventmesh-go-16","depends_on_id":"eventmesh-go-10","type":"parent-child","created_at":"2025-10-14T11:29:34.139681-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-17","title":"[Task 105] Implement admin debugging endpoints","description":"Epic 10, Task 105: Create GET /api/v1/admin/* endpoints for system-wide monitoring: clients, subscriptions, stats, health","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-14T11:29:18.280658-07:00","updated_at":"2025-10-14T20:21:21.488179-07:00","closed_at":"2025-10-14T20:21:21.488179-07:00","dependencies":[{"issue_id":"eventmesh-go-17","depends_on_id":"eventmesh-go-10","type":"parent-child","created_at":"2025-10-14T11:29:34.14693-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-18","title":"[Task 106] Add HTTP server integration to main.go","description":"Epic 10, Task 106: Add --http and --http-port flags to cmd/eventmesh/main.go to start HTTP API server alongside gRPC server","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-14T11:29:18.287689-07:00","updated_at":"2025-10-15T10:06:35.802259-07:00","closed_at":"2025-10-15T10:06:35.802259-07:00","dependencies":[{"issue_id":"eventmesh-go-18","depends_on_id":"eventmesh-go-10","type":"parent-child","created_at":"2025-10-14T11:29:34.154243-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-19","title":"[Epic 90] Code Quality \u0026 Maintenance","description":"Epic for code quality improvements, linting fixes, and maintenance tasks","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-14T11:29:25.301929-07:00","updated_at":"2025-10-14T11:29:25.301929-07:00"}
{"id":"eventmesh-go-2","title":"Create internal/httpapi package structure","description":"Set up basic package structure for HTTP API: server.go, handlers.go, auth.go, types.go, middleware.go as outlined in design doc","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-13T22:50:28.345186-07:00","updated_at":"2025-10-14T11:29:42.389437-07:00","closed_at":"2025-10-14T11:29:42.389437-07:00"}
{"id":"eventmesh-go-20","title":"[Task 900] Fix remaining linting issues","description":"Epic 90, Task 900: Address remaining 43 linting issues: 39 errcheck (unchecked Close() calls), 4 staticcheck (empty branches, unused results)","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-14T11:29:25.311063-07:00","updated_at":"2025-10-14T11:29:25.311063-07:00","dependencies":[{"issue_id":"eventmesh-go-20","depends_on_id":"eventmesh-go-19","type":"parent-child","created_at":"2025-10-14T11:29:42.382011-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-21","title":"Epic 20: Production Testing \u0026 Integration","description":"","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-14T12:49:14.425504-07:00","updated_at":"2025-10-14T12:49:14.425504-07:00"}
{"id":"eventmesh-go-22","title":"[Task 201] HTTP Client Library/CLI Tool","description":"","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-14T12:49:20.432503-07:00","updated_at":"2025-10-20T12:07:48.491685-07:00","closed_at":"2025-10-20T12:07:48.491685-07:00","dependencies":[{"issue_id":"eventmesh-go-22","depends_on_id":"eventmesh-go-21","type":"parent-child","created_at":"2025-10-14T12:50:57.311781-07:00","created_by":"rmacdonaldsmith"},{"issue_id":"eventmesh-go-22","depends_on_id":"eventmesh-go-18","type":"blocks","created_at":"2025-10-14T12:51:32.2845-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-23","title":"[Task 202] Single Node Integration Test","description":"","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-14T12:49:26.158093-07:00","updated_at":"2025-10-20T12:58:07.658556-07:00","closed_at":"2025-10-20T12:58:07.658556-07:00","dependencies":[{"issue_id":"eventmesh-go-23","depends_on_id":"eventmesh-go-21","type":"parent-child","created_at":"2025-10-14T12:50:57.321634-07:00","created_by":"rmacdonaldsmith"},{"issue_id":"eventmesh-go-23","depends_on_id":"eventmesh-go-18","type":"blocks","created_at":"2025-10-14T12:51:32.293326-07:00","created_by":"rmacdonaldsmith"},{"issue_id":"eventmesh-go-23","depends_on_id":"eventmesh-go-22","type":"blocks","created_at":"2025-10-14T12:51:32.308331-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-24","title":"[Task 203] Server-Sent Events (SSE) Client","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-14T12:49:31.290742-07:00","updated_at":"2025-10-14T12:51:48.754354-07:00","dependencies":[{"issue_id":"eventmesh-go-24","depends_on_id":"eventmesh-go-21","type":"parent-child","created_at":"2025-10-14T12:50:57.329547-07:00","created_by":"rmacdonaldsmith"},{"issue_id":"eventmesh-go-24","depends_on_id":"eventmesh-go-18","type":"blocks","created_at":"2025-10-14T12:51:32.300757-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-25","title":"[Task 204] Publisher/Subscriber Example Applications","description":"","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-14T12:49:37.55682-07:00","updated_at":"2025-10-14T12:51:48.763885-07:00","dependencies":[{"issue_id":"eventmesh-go-25","depends_on_id":"eventmesh-go-21","type":"parent-child","created_at":"2025-10-14T12:50:57.3366-07:00","created_by":"rmacdonaldsmith"},{"issue_id":"eventmesh-go-25","depends_on_id":"eventmesh-go-22","type":"blocks","created_at":"2025-10-14T12:51:32.315967-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-26","title":"[Task 205] Multi-Client Load Testing","description":"","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-14T12:50:14.50323-07:00","updated_at":"2025-10-14T12:51:48.772129-07:00","dependencies":[{"issue_id":"eventmesh-go-26","depends_on_id":"eventmesh-go-21","type":"parent-child","created_at":"2025-10-14T12:50:57.344618-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-27","title":"[Task 206] Multi-Node Server Orchestration","description":"","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-14T12:50:14.513137-07:00","updated_at":"2025-10-14T12:51:48.779539-07:00","dependencies":[{"issue_id":"eventmesh-go-27","depends_on_id":"eventmesh-go-21","type":"parent-child","created_at":"2025-10-14T12:50:57.352164-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-28","title":"[Task 207] Cross-Node Event Flow Testing","description":"","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-14T12:50:14.520724-07:00","updated_at":"2025-10-14T12:51:48.786965-07:00","dependencies":[{"issue_id":"eventmesh-go-28","depends_on_id":"eventmesh-go-21","type":"parent-child","created_at":"2025-10-14T12:50:57.360444-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-29","title":"[Task 208] Production Deployment Testing","description":"","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-14T12:50:14.528678-07:00","updated_at":"2025-10-14T12:51:48.794235-07:00","dependencies":[{"issue_id":"eventmesh-go-29","depends_on_id":"eventmesh-go-21","type":"parent-child","created_at":"2025-10-14T12:50:57.368034-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-3","title":"Implement JWT authentication middleware","description":"Create JWT-based authentication for client isolation. Simple clientId-based tokens for MVP as per design","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-13T22:50:33.56609-07:00","updated_at":"2025-10-14T11:29:42.389531-07:00","closed_at":"2025-10-14T11:29:42.389531-07:00","dependencies":[{"issue_id":"eventmesh-go-3","depends_on_id":"eventmesh-go-2","type":"blocks","created_at":"2025-10-13T22:51:34.953993-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-30","title":"[Task 209] Metrics and Health Monitoring","description":"","status":"open","priority":4,"issue_type":"task","created_at":"2025-10-14T12:50:14.535901-07:00","updated_at":"2025-10-14T12:51:48.803075-07:00","dependencies":[{"issue_id":"eventmesh-go-30","depends_on_id":"eventmesh-go-21","type":"parent-child","created_at":"2025-10-14T12:50:57.376351-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-31","title":"[Task 210] End-to-End Testing Suite","description":"","status":"open","priority":4,"issue_type":"task","created_at":"2025-10-14T12:50:14.54404-07:00","updated_at":"2025-10-14T12:51:48.810786-07:00","dependencies":[{"issue_id":"eventmesh-go-31","depends_on_id":"eventmesh-go-21","type":"parent-child","created_at":"2025-10-14T12:50:57.383643-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-32","title":"Replace inmemory event log with RocksDB","description":"","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-14T13:29:53.648819-07:00","updated_at":"2025-10-14T13:29:53.648819-07:00"}
{"id":"eventmesh-go-33","title":"Comprehensive Documentation Improvements","description":"","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-14T18:48:16.951222-07:00","updated_at":"2025-10-14T18:48:16.951222-07:00"}
{"id":"eventmesh-go-34","title":"Implement mTLS security for peer-to-peer communication","description":"\n## Overview\nImplement mutual TLS (mTLS) security for secure communication between EventMesh nodes as outlined in design.md Appendix B.\n\n## Current Status\n- mTLS is documented in design.md but marked as 'deferred from MVP'\n- PeerLink interfaces reference mTLS but current implementation lacks security\n- No TLS/crypto code exists in codebase currently\n\n## Requirements (from design.md)\n- **CA Setup**: Use smallstep step-ca as internal Certificate Authority  \n- **Node Enrollment**: Each node generates keypair on startup, gets cert from step-ca\n- **mTLS Configuration**: Services use tls.RequireAndVerifyClientCert\n- **Rotation \u0026 Revocation**: Short-lived certs (24h) with automatic renewal\n- **Node Identity**: Certificate SANs encode node identities (e.g., spiffe://mesh/prod/node-42)\n\n## Implementation Tasks\n1. Set up step-ca integration for certificate management\n2. Add TLS configuration to PeerLink implementations  \n3. Implement certificate rotation and renewal\n4. Add node identity verification\n5. Update PeerLink to use secure gRPC with mTLS\n6. Add security tests and validation\n\n## Priority\nP2 - Important for production deployment but not blocking MVP functionality\n","status":"open","priority":2,"issue_type":"epic","created_at":"2025-10-14T19:20:00.965407-07:00","updated_at":"2025-10-14T19:20:00.965407-07:00"}
{"id":"eventmesh-go-35","title":"SSE + Subscription API integration strategy","description":"\n## Overview\nCurrently we have two separate subscription mechanisms that work independently. Need to evaluate and potentially unify the approach.\n\n## Current State\n**SSE Stream Subscriptions:**\n- Subscribe via GET /api/v1/events/stream?topic=pattern\n- Creates temporary HTTPClient subscriptions for real-time delivery\n- Subscriptions disappear on disconnect\n\n**Subscription Management API:**\n- POST /api/v1/subscriptions with {\"topic\": \"pattern\"} \n- GET /api/v1/subscriptions to list persistent subscriptions\n- DELETE /api/v1/subscriptions/{id} to remove specific subscriptions\n- Stored persistently in MeshNode\n\n## Questions to Resolve\n1. Should SSE subscriptions appear in GET /api/v1/subscriptions response?\n2. Should POST /api/v1/subscriptions automatically enable SSE delivery?\n3. Should we maintain separate temporary vs persistent subscription models?\n4. How should subscription persistence work across SSE reconnections?\n\n## Implementation Considerations\n- May need to distinguish between 'streaming' and 'persistent' subscription types\n- Consider adding subscription metadata (type, created_via, etc.)\n- Need to maintain backward compatibility during any changes\n- Update design documentation with chosen approach\n\n## Priority\nP1 - Important architectural decision that affects API design and user experience\n","status":"open","priority":1,"issue_type":"feature","created_at":"2025-10-14T19:32:33.829462-07:00","updated_at":"2025-10-14T19:32:33.829462-07:00"}
{"id":"eventmesh-go-36","title":"Topic filtering interface consistency","description":"\n## Overview\nCurrently we have different interfaces for specifying topics across our APIs, which may cause confusion for API consumers.\n\n## Current Inconsistency\n**SSE Stream Endpoint:**\n- Uses query parameter: GET /api/v1/events/stream?topic=pattern\n- Simple string parameter\n\n**Subscription Management API:**\n- Uses JSON body: POST /api/v1/subscriptions with {\"topic\": \"pattern\"}\n- Structured JSON request\n\n## Impact\n- Different patterns for the same concept (topic specification)\n- Potential confusion for API consumers\n- Inconsistent documentation and examples\n\n## Possible Solutions\n1. **Standardize on Query Parameters**: Change POST to use ?topic= parameter\n2. **Standardize on JSON Bodies**: Change SSE to accept POST with JSON body\n3. **Support Both**: Allow both formats on all endpoints for flexibility\n4. **Document Rationale**: Keep current design but clearly document why each uses different approach\n\n## Implementation Considerations\n- SSE traditionally uses GET requests (RESTful for read-only streaming)\n- Subscription creation naturally fits POST with JSON body\n- Query parameters are simpler for streaming use cases\n- JSON bodies allow for more complex subscription metadata\n\n## Recommendation\nLikely keep current design but improve documentation to explain the rationale for each approach.\n\n## Priority\nP2 - API consistency improvement, but not blocking functionality\n","status":"open","priority":2,"issue_type":"feature","created_at":"2025-10-14T19:32:44.813447-07:00","updated_at":"2025-10-14T19:32:44.813447-07:00"}
{"id":"eventmesh-go-37","title":"HTTPClient local subscription tracking cleanup","description":"\n## Overview\nAfter refactoring subscription management to use MeshNode as single source of truth, HTTPClient still maintains local subscription tracking that may no longer be necessary.\n\n## Current State\n**HTTPClient has local subscription tracking:**\n- AddSubscription(), GetSubscriptions(), RemoveSubscription() methods\n- Local subscriptions map with mutex protection\n- Originally designed for per-client state management\n\n**MeshNode now handles subscription state:**\n- GetClientSubscriptions() provides authoritative subscription data\n- UnsubscribeByID() manages subscription lifecycle\n- All HTTP handlers delegate to MeshNode methods\n\n## Analysis Needed\n1. **Still Used?** Audit codebase to see if HTTPClient local tracking is still used\n2. **SSE Integration** Check if SSE streaming still relies on HTTPClient.DeliverEvent()\n3. **Performance** Evaluate if local caching provides performance benefits\n\n## Possible Actions\n1. **Remove Unused Code**: If local tracking isn't used, remove it entirely\n2. **Clarify Purpose**: If still needed, document why both local and MeshNode tracking exist\n3. **Hybrid Approach**: Use MeshNode for persistence, HTTPClient for active streaming state\n\n## Investigation Tasks\n- [ ] Grep codebase for HTTPClient.AddSubscription usage\n- [ ] Check if DeliverEvent() method relies on local subscription state\n- [ ] Review SSE streaming implementation dependencies\n- [ ] Test removing local tracking to see what breaks\n\n## Priority\nP2 - Code cleanup and architecture clarification, but not urgent\n","status":"open","priority":2,"issue_type":"chore","created_at":"2025-10-14T19:32:58.075712-07:00","updated_at":"2025-10-14T19:32:58.075712-07:00"}
{"id":"eventmesh-go-38","title":"Add comprehensive subscription + SSE integration test","description":"\n## Overview\nCreate an integration test that validates the complete flow of using both Subscription Management API and SSE streaming together.\n\n## Current Testing Gap\n**Existing Tests:**\n- Subscription API: POST, GET, DELETE tested independently\n- SSE streaming: end-to-end event delivery tested independently \n- **Missing**: Tests that combine both APIs in realistic workflows\n\n## Test Scenarios Needed\n1. **Subscription → SSE Flow**:\n   - Create subscription via POST /api/v1/subscriptions\n   - Connect to SSE stream /api/v1/events/stream  \n   - Publish event and verify it's delivered via SSE\n   - Verify subscription appears in GET /api/v1/subscriptions\n\n2. **SSE → Subscription Management**:\n   - Connect to SSE with topic filter\n   - Check if subscription appears in API (depending on architecture decision)\n   - Delete subscription and verify SSE behavior\n\n3. **Multi-Client Integration**:\n   - Multiple clients with different subscriptions\n   - Verify proper client isolation\n   - Event delivery to correct clients only\n\n## Implementation Details\n- Combine existing test patterns from TestCreateSubscription and TestStreamEvents\n- Test both authenticated and error scenarios\n- Verify subscription metadata consistency\n- Test connection lifecycle (connect → subscribe → events → disconnect → reconnect)\n\n## Success Criteria\n- [ ] Complete workflow test passes\n- [ ] Proper error handling for edge cases\n- [ ] Client isolation verified\n- [ ] Subscription state consistency validated\n\n## Priority\nP1 - Important for validating the integration architecture works as expected\n","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-14T19:33:10.136949-07:00","updated_at":"2025-10-14T19:48:24.964596-07:00","closed_at":"2025-10-14T19:48:24.964596-07:00"}
{"id":"eventmesh-go-39","title":"Improve error handling with typed errors","description":"## Overview\nReplace string-based error matching with proper error types for more robust error handling and classification.\n\n## Current Approach\nString matching in DeleteSubscription handler for error classification.\n\n## Issues with Current Approach\n- Fragile: Changes to error messages break error detection\n- Hard to test: Need to match exact error text\n- Not maintainable: Error conditions scattered across string checks\n- Internationalization: Cannot localize error messages easily\n\n## Proposed Solution\nDefine proper error types with constants for subscription errors, update MeshNode to return typed errors, and update HTTP handlers to use error type checking instead of string matching.\n\n## Implementation Plan\n1. Define error types in pkg/meshnode or internal/errors\n2. Update MeshNode methods to return typed errors\n3. Update HTTP handlers to use error type checking\n4. Add comprehensive error handling tests\n5. Update documentation with error specifications\n\n## Benefits\n- More robust error handling\n- Better testability\n- Clearer API contracts\n- Easier maintenance\n- Foundation for API documentation\n\n## Priority\nP3 - Quality improvement, but current string matching works for MVP","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-14T19:34:43.727312-07:00","updated_at":"2025-10-14T19:34:43.727312-07:00"}
{"id":"eventmesh-go-4","title":"Create event publishing endpoints","description":"Implement POST /api/v1/events endpoint that integrates with existing MeshNode.PublishEvent method","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-13T22:50:38.699631-07:00","updated_at":"2025-10-14T11:29:42.389605-07:00","closed_at":"2025-10-14T11:29:42.389605-07:00","dependencies":[{"issue_id":"eventmesh-go-4","depends_on_id":"eventmesh-go-3","type":"blocks","created_at":"2025-10-13T22:51:29.097262-07:00","created_by":"rmacdonaldsmith"},{"issue_id":"eventmesh-go-4","depends_on_id":"eventmesh-go-2","type":"blocks","created_at":"2025-10-13T22:51:34.9617-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-40","title":"Add subscription metrics and observability","description":"## Overview\nAdd metrics and observability for subscription management to support monitoring and debugging in production environments.\n\n## Current State\nNo metrics are currently collected for subscription operations, making it difficult to monitor system health and usage patterns.\n\n## Proposed Metrics\n**Subscription Counters:**\n- Total active subscriptions per client\n- Subscription creation rate\n- Subscription deletion rate\n- Failed subscription attempts\n\n**SSE Stream Metrics:**\n- Active SSE connections count\n- SSE connection duration\n- Events delivered per subscription\n- SSE connection failures\n\n**Performance Metrics:**\n- Subscription operation latency\n- MeshNode subscription lookup time\n- Event delivery latency\n\n## Implementation Approach\n1. Add metrics collection to HTTP handlers\n2. Add metrics to MeshNode subscription operations\n3. Expose metrics via /metrics endpoint (Prometheus format)\n4. Add health check indicators for subscription system\n5. Consider structured logging for subscription events\n\n## Benefits\n- Production monitoring capabilities\n- Performance bottleneck identification\n- Usage pattern analysis\n- Debugging support\n- SLA/SLO measurement foundation\n\n## Integration Points\n- HTTP handlers (operation metrics)\n- MeshNode (state metrics)\n- SSE streaming (connection metrics)\n- Health endpoint (system health)\n\n## Priority\nP3 - Important for production but not blocking MVP functionality","status":"open","priority":3,"issue_type":"feature","created_at":"2025-10-14T19:34:54.261152-07:00","updated_at":"2025-10-14T19:34:54.261152-07:00"}
{"id":"eventmesh-go-41","title":"Add shell completion setup instructions to examples documentation","description":"Add instructions for setting up bash/zsh/fish autocompletion for eventmesh-cli in the examples documentation. This will improve user experience by enabling tab completion for commands, flags, and options.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-16T16:56:30.008256-07:00","updated_at":"2025-10-16T16:56:30.008256-07:00"}
{"id":"eventmesh-go-42","title":"Epic: Add Offset-Based Event Replay","description":"Expose EventMesh's existing offset-based replay capabilities through HTTP API and CLI. The EventLog core already supports ReadFromTopic() and ReplayTopic() with offset parameters, but these aren't accessible via user-facing interfaces. This epic will add HTTP endpoints and CLI commands for historical event access, enabling checkpoint-based processing, debugging, and data recovery workflows.","status":"closed","priority":2,"issue_type":"epic","created_at":"2025-10-16T17:02:13.235319-07:00","updated_at":"2025-10-17T16:24:17.173738-07:00","closed_at":"2025-10-17T16:24:17.173738-07:00"}
{"id":"eventmesh-go-43","title":"Add HTTP API endpoints for offset-based event reading","description":"Implement new HTTP endpoints: GET /api/v1/events/{topic}?offset={start}\u0026limit={count} for batch reading, GET /api/v1/events/{topic}/replay?offset={start} for streaming replay, and GET /api/v1/events/{topic}/info for topic metadata. Wire these to existing EventLog.ReadFromTopic() and ReplayTopic() methods.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T17:02:28.909403-07:00","updated_at":"2025-10-17T12:13:21.052802-07:00","closed_at":"2025-10-17T12:13:21.052802-07:00"}
{"id":"eventmesh-go-44","title":"Add CLI replay command with offset support","description":"Add new 'eventmesh-cli replay' command with --topic, --offset, and --limit parameters. Extend existing 'stream' command with --offset parameter. Add 'topics info' command to show topic metadata (current offset, total events).","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T17:02:36.160568-07:00","updated_at":"2025-10-17T16:24:06.485458-07:00","closed_at":"2025-10-17T16:24:06.485458-07:00"}
{"id":"eventmesh-go-45","title":"Update examples and documentation for offset-based replay","description":"Add examples demonstrating offset-based replay for checkpoint-based processing, debugging workflows, and data recovery. Update API documentation and add use case documentation showing practical applications.","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-16T17:02:41.960131-07:00","updated_at":"2025-10-17T16:24:11.720395-07:00","closed_at":"2025-10-17T16:24:11.720395-07:00"}
{"id":"eventmesh-go-46","title":"Examples Audit \u0026 Cleanup Epic","description":"Clean up and simplify examples directory to focus on essential functionality during active development phase. Remove overly complex examples and ensure consistency with current HTTP API. Priority: reduce complexity while maintaining clear learning progression.","status":"open","priority":2,"issue_type":"epic","created_at":"2025-10-16T17:41:57.043685-07:00","updated_at":"2025-10-16T17:41:57.043685-07:00"}
{"id":"eventmesh-go-47","title":"Task 461: Audit Current Examples","description":"Review each example directory for API compatibility and assess complexity vs. development stage appropriateness. Document which examples are essential vs. complex demos that should be simplified or removed during active development.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T17:42:03.35609-07:00","updated_at":"2025-10-16T17:42:03.35609-07:00","dependencies":[{"issue_id":"eventmesh-go-47","depends_on_id":"eventmesh-go-46","type":"parent-child","created_at":"2025-10-16T17:42:52.581622-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-48","title":"Task 462: Review examples/basic for Relevance","description":"Check if examples/basic/main.go is still relevant since it uses internal EventLog APIs directly (bypassing HTTP API layer). Determine if it should be updated to use HTTP API, moved to a different location, or removed entirely to maintain consistency with current architecture.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T17:42:10.152994-07:00","updated_at":"2025-10-16T17:42:10.152994-07:00","dependencies":[{"issue_id":"eventmesh-go-48","depends_on_id":"eventmesh-go-46","type":"parent-child","created_at":"2025-10-16T17:42:58.398169-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-49","title":"Task 463: Simplify/Remove Complex Examples","description":"Evaluate complex examples (cli-usage/order-workflow.sh 245 lines, pattern-subscriber.sh 131 lines, single-node/demo.sh 139 lines) and determine if they should be simplified or removed during active development phase. Keep focus on core functionality demonstrations rather than complex business workflows.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T17:42:16.685246-07:00","updated_at":"2025-10-16T17:42:16.685246-07:00","dependencies":[{"issue_id":"eventmesh-go-49","depends_on_id":"eventmesh-go-46","type":"parent-child","created_at":"2025-10-16T17:42:58.406602-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-5","title":"Implement Server-Sent Events streaming","description":"Create GET /api/v1/events/stream endpoint for real-time event delivery using SSE and existing subscription system","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-13T22:50:44.121596-07:00","updated_at":"2025-10-14T11:29:42.389675-07:00","closed_at":"2025-10-14T11:29:42.389675-07:00","dependencies":[{"issue_id":"eventmesh-go-5","depends_on_id":"eventmesh-go-3","type":"blocks","created_at":"2025-10-13T22:51:29.105065-07:00","created_by":"rmacdonaldsmith"},{"issue_id":"eventmesh-go-5","depends_on_id":"eventmesh-go-2","type":"blocks","created_at":"2025-10-13T22:51:34.969896-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-50","title":"Task 464: Update README Files Consistency","description":"Ensure all example README files match actual example content and current codebase functionality. Update main examples/README.md to reflect any changes from cleanup. Verify all scripts and instructions work with current EventMesh HTTP API and CLI commands.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T17:42:23.780514-07:00","updated_at":"2025-10-16T17:42:23.780514-07:00","dependencies":[{"issue_id":"eventmesh-go-50","depends_on_id":"eventmesh-go-46","type":"parent-child","created_at":"2025-10-16T17:42:58.414851-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-51","title":"Task 465: Consolidate Essential Examples","description":"Keep only examples that demonstrate core EventMesh functionality clearly. Ensure each remaining example serves a distinct educational purpose and creates a clear learning progression from simple pub/sub to more advanced features. Remove redundant or overlapping examples.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-16T17:42:30.25911-07:00","updated_at":"2025-10-16T17:42:30.25911-07:00","dependencies":[{"issue_id":"eventmesh-go-51","depends_on_id":"eventmesh-go-46","type":"parent-child","created_at":"2025-10-16T17:42:58.422793-07:00","created_by":"rmacdonaldsmith"}]}
{"id":"eventmesh-go-52","title":"Comprehensive CLI replay functionality verification","description":"Verify all CLI replay commands work correctly including replay, topics info, and stream --offset functionality. Ensure edge cases are handled and error messages are clear.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-17T16:23:55.582125-07:00","updated_at":"2025-10-17T16:23:55.582125-07:00"}
{"id":"eventmesh-go-53","title":"Add Docker Compose multi-node EventMesh setup","description":"Create docker-compose.yml with 2-3 EventMesh nodes for distributed testing. Include service discovery, proper port mapping, environment variables for node configuration, documentation in examples/docker/ directory, --no-auth mode for development, and scaling instructions.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-17T16:37:52.685511-07:00","updated_at":"2025-10-17T16:37:52.685511-07:00"}
{"id":"eventmesh-go-54","title":"Create parameterized start-meshnode.sh script","description":"Create a new parameterized script 'start-meshnode.sh' that accepts a node-id parameter for starting EventMesh nodes with unique identifiers.\n\n## Requirements:\n- Create examples/simple/start-meshnode.sh script\n- Accept node-id as command-line parameter (e.g., ./start-meshnode.sh node-1)\n- Generate unique configurations per node (ports, data directories, etc.)\n- Provide validation and error handling for missing/invalid node-id\n- Keep existing start-server.sh unchanged for single-node use\n- Include usage examples in script comments\n\n## Success Criteria:\n- Script can start multiple EventMesh instances simultaneously\n- Each instance has unique node-id and configuration\n- No port conflicts between nodes\n- Clear usage documentation and examples\n- Integration with existing simple/ example structure","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-17T16:38:55.297514-07:00","updated_at":"2025-10-17T16:38:55.297514-07:00"}
{"id":"eventmesh-go-55","title":"Implement mesh node discovery mechanism","description":"Design and implement a discovery mechanism for new EventMesh nodes to find and connect to existing nodes in the mesh network.\n\n## Problem Statement:\nWhen a new EventMesh node starts up, it needs a way to discover other active nodes in the mesh to establish peer connections and participate in the distributed event streaming network.\n\n## Research Areas:\n- Static configuration (seed nodes, bootstrap lists)\n- Dynamic discovery (DNS-based, multicast, service discovery systems)\n- Hybrid approaches (static seeds + gossip protocol)\n- Integration with existing PeerLink architecture\n\n## Requirements:\n- New nodes can discover existing mesh nodes automatically\n- Resilient to node failures and network partitions\n- Configurable discovery mechanism (support multiple strategies)\n- Integration with current MeshNode and PeerLink components\n- Consider security implications of node discovery\n- Support both development and production scenarios\n\n## Success Criteria:\n- New node can join an existing mesh without manual configuration\n- Discovery mechanism is fault-tolerant\n- Clear configuration options for different deployment scenarios\n- Documentation for setup and troubleshooting\n- Integration tests demonstrating multi-node mesh formation\n\n## Implementation Considerations:\n- Review existing PeerLink implementation for compatibility\n- Consider discovery service dependencies and complexity\n- Plan for bootstrap/chicken-and-egg scenarios\n- Design for eventual consistency in mesh topology","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-17T16:40:04.454175-07:00","updated_at":"2025-10-17T16:40:04.454175-07:00"}
{"id":"eventmesh-go-56","title":"Replace --http-secret flag with environment variable","description":"Replace insecure command-line JWT secret flag with EVENTMESH_JWT_SECRET environment variable. Remove --http-secret flag entirely, update all examples and tests. Eliminates process list secret exposure and aligns with security best practices.","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-20T21:57:11.462963-07:00","updated_at":"2025-10-20T23:04:29.766729-07:00","closed_at":"2025-10-20T23:04:29.766729-07:00"}
{"id":"eventmesh-go-57","title":"Implement proper secret management system","description":"Future work: Implement production-grade secret management with configuration file support, external secret providers (Vault, Kubernetes Secrets, AWS Secrets Manager), secret rotation capabilities, and SecretProvider interface architecture.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-20T21:57:16.021685-07:00","updated_at":"2025-10-20T21:57:16.021685-07:00"}
{"id":"eventmesh-go-58","title":"Implement unified subscription architecture","description":"Replace dual subscription model with persistent subscriptions + SSE streaming. Remove temporary SSE subscriptions (?topic= parameter), make SSE stream ALL active subscriptions for client, use persistent subscription API as single source of truth. Clean up HTTPClient local subscription tracking. This aligns with industry standards like Kafka, Pub/Sub, and other production event streaming systems.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-20T22:58:13.76536-07:00","updated_at":"2025-10-20T22:58:13.76536-07:00"}
{"id":"eventmesh-go-59","title":"Implement SSE reconnection with event resume","description":"Add production-grade reconnection support with hybrid cursor model. Phase 1: Basic resume support with ?since=eventId parameter. Phase 2: Enhanced control with force=true override. Hybrid model: max(server_cursor, client_hint) provides safety defaults with client flexibility. Handles normal reconnect, catch-up, recovery, and intentional rewind scenarios.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-20T22:58:19.491361-07:00","updated_at":"2025-10-20T22:58:19.491361-07:00"}
{"id":"eventmesh-go-6","title":"Create subscription management endpoints","description":"Implement POST/GET/DELETE /api/v1/subscriptions endpoints for client subscription management with proper client isolation","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-13T22:50:49.141036-07:00","updated_at":"2025-10-14T11:29:42.38974-07:00","closed_at":"2025-10-14T11:29:42.38974-07:00"}
{"id":"eventmesh-go-60","title":"Add reconnection safety and operational features","description":"Future work for production-grade operational controls. Server cursor tracking per subscription for safety and monitoring. Retention boundary enforcement to prevent unbounded history requests. Replay rate limiting and budgets to protect against resource exhaustion. Monitoring and observability for operational visibility. Builds on hybrid reconnection model for production deployment.","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-20T22:58:24.830735-07:00","updated_at":"2025-10-20T22:58:24.830735-07:00"}
{"id":"eventmesh-go-7","title":"Implement admin debugging endpoints","description":"Create GET /api/v1/admin/* endpoints for system-wide monitoring: clients, subscriptions, stats, health","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-13T22:50:54.447509-07:00","updated_at":"2025-10-14T11:29:42.389817-07:00","closed_at":"2025-10-14T11:29:42.389817-07:00"}
{"id":"eventmesh-go-8","title":"Add HTTP server integration to main.go","description":"Add --http and --http-port flags to cmd/eventmesh/main.go to start HTTP API server alongside gRPC server","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-13T22:51:01.706297-07:00","updated_at":"2025-10-14T11:29:42.389879-07:00","closed_at":"2025-10-14T11:29:42.389879-07:00"}
{"id":"eventmesh-go-9","title":"Fix remaining linting issues","description":"Address remaining 43 linting issues: 39 errcheck (unchecked Close() calls), 4 staticcheck (empty branches, unused results)","status":"closed","priority":3,"issue_type":"task","created_at":"2025-10-13T22:51:07.732453-07:00","updated_at":"2025-10-14T11:29:42.389942-07:00","closed_at":"2025-10-14T11:29:42.389942-07:00"}
